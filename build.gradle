plugins {
	id 'com.diffplug.spotless' apply false
	id 'com.gradleup.shadow' apply false
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'checkstyle'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'com.gradleup.shadow'

	checkstyle {
		configFile = rootProject.file('checkstyle.xml')
		toolVersion = project.checkstyle_version
	}

	spotless {
		lineEndings = com.diffplug.spotless.LineEnding.UNIX

		java {
			removeUnusedImports()
			importOrder('java.', 'javax.', '', 'softwareschreiber.')
			leadingSpacesToTabs()
			trimTrailingWhitespace()
		}
	}

	version = rootProject.version
	group = 'softwareschreiber.chess'

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 21
	}

	java {
		withSourcesJar()
		withJavadocJar()

		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21

		if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
			toolchain {
				languageVersion = JavaLanguageVersion.of(21)
			}
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		compileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"
		runtimeOnly "org.tinylog:slf4j-tinylog:${tinylog_version}"
		runtimeOnly "org.tinylog:tinylog-impl:${tinylog_version}"
		implementation "org.tinylog:tinylog-api:${tinylog_version}"

		testImplementation "org.jooq:joor:${joor_version}"
		testImplementation "org.junit.jupiter:junit-jupiter:${junit_jupiter_version}"
		testRuntimeOnly "org.junit.platform:junit-platform-launcher"
		testCompileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"
	}

	test {
		useJUnitPlatform()
	}

	javadoc {
		failOnError = false
		options.addBooleanOption('html5', true)

		// disable 'missing' warnings
		options.addStringOption('Xdoclint:all,-missing', '-quiet')
	}

	assemble.dependsOn javadocJar

	publishing {
		publications {
			"$project.name"(MavenPublication) {
				from components.java
			}
		}
	}
}
